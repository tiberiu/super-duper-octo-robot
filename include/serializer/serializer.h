#ifndef _SERIALIZER_H
#define _SERIALIZER_H

// AUTOGENERATED FILE, DO NOT MODIFY
#include <string>
#include <map>
#include <cstdlib>
#include <iostream>
#include <fstream>

#include "components/component.h"
#include "scene.h"
#include "serializer/encoder.h"

using namespace std;

// START_CODE_INCLUDES
#include "components/transformcomponent.h"
#include "components/renderercomponent.h"
#include "geometry/vector3.h"
#include "geometry/mesh.h"
// END_CODE_INCLUDES

class Serializer {
public:
    EncoderNode* LoadData(string raw_data);
    string LoadRawData(string filePath);
    vector<Scene*> LoadGameData(string raw_data); 
    void LoadScene(string raw_data, Scene& scene);
    Component* DeserializeComponent(EncoderNode* componentNode);


    // Primitive object deserializers
    int DeserializeInt(EncoderNode* objNode);
    vector<int> DeserializeIntList(EncoderNode* objNode);
    string DeserializeString(EncoderNode* objNode);
    vector<string> DeserializeStringList(EncoderNode* objNode);
    float DeserializeFloat(EncoderNode* objNode);
    vector<float> DeserializeFloatList(EncoderNode* objNode);

    // START_CODE_COMPONENT_DESERIALIZERS_DECLARATION
    TransformComponent* DeserializeTransform(EncoderNode* componentNode);
    RendererComponent* DeserializeRenderer(EncoderNode* componentNode);
    // END_CODE_COMPONENT_DESERIALIZERS_DECLARATION

    // START_CODE_OBJECT_DESERIALIZERS_DECLARATION
    Vector3* DeserializeVector3(EncoderNode* objNode);
    vector<Vector3*> DeserializeVector3List(EncoderNode* objNode);
    Mesh* DeserializeMesh(EncoderNode* objNode);
    vector<Mesh*> DeserializeMeshList(EncoderNode* objNode);
    // END_CODE_OBJECT_DESERIALIZERS_DECLARATION
};
#endif
